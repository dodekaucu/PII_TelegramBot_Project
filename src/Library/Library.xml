<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Library</name>
    </assembly>
    <members>
        <member name="T:Handlers.IMessage">
            <summary>
            Interfaz de mensajes.
            </summary>
        </member>
        <member name="P:Handlers.IMessage.ID">
            <summary>
            Id del usuario.
            </summary>
        </member>
        <member name="P:Handlers.IMessage.Text">
            <summary>
            Mensaje.
            </summary>
        </member>
        <member name="T:Handlers.TelegramMSGadapter">
            <summary>
            Adaptador de mensajes de Telegram a mensajes de la interfaz de usuario.
            </summary>
        </member>
        <member name="M:Handlers.TelegramMSGadapter.#ctor(Telegram.Bot.Types.Message)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Handlers.TelegramMSGadapter"/>.
            </summary>
            <param name="message">mensaje recibido.</param>
        </member>
        <member name="P:Handlers.TelegramMSGadapter.Text">
            <summary>
            Mensaje recibido.
            </summary>
        </member>
        <member name="P:Handlers.TelegramMSGadapter.ID">
            <summary>
            Identificador del usuario que envió el mensaje.
            </summary>
        </member>
        <member name="T:Handlers.AddAdminHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "/AddAdmin".
            </summary>
        </member>
        <member name="M:Handlers.AddAdminHandler.#ctor(Handlers.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Handlers.AddAdminHandler"/>. Esta clase procesa el mensaje "/AddAdmin".
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Handlers.AddAdminHandler.InternalHandle(Handlers.IMessage,System.String@)">
            <summary>
            Procesa el comando "/AddAdmin", Si es ejecutado por un Administrador entonces se procede a añadir como administrador
            al usuario ingresado. El valor que se ingresa debe ser el ID del usuario, en este caso es el ID de Telegram.
            El ID del usuario se debe preguntar a la persona que se agrega, hay un bot que te lo dice (@userinfobot).
            En el caso de que el usuario que ejecute el comando no sea Admin se le informa que no tiene permisos para hacerlo.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
        </member>
        <member name="T:Handlers.AdminInvitationHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "/Invitar".
            </summary>
        </member>
        <member name="M:Handlers.AdminInvitationHandler.#ctor(Handlers.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Handlers.AdminInvitationHandler"/>. Esta clase procesa el mensaje "/Invitar".
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Handlers.AdminInvitationHandler.InternalHandle(Handlers.IMessage,System.String@)">
            <summary>
            Procesa el comando "/Invitar", Si es ejecutado por un Administrador entonces se procede a invitar
            al usuario ingresado. El valor que se ingresa debe ser el ID del usuario, en este caso es el ID de Telegram.
            El ID del usuario se debe preguntar a la persona que se invita, hay un bot que te lo dice (@userinfobot).
            En el caso de que el que ejecute el comando no sea Admin se le informa que no tiene permisos para hacerlo.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
        </member>
        <member name="T:Handlers.StartHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "/start".
            </summary>
        </member>
        <member name="M:Handlers.StartHandler.#ctor(Handlers.BaseHandler)">
            <summary>
            Inicializa una instancia de la clase <see cref="T:Handlers.StartHandler"/>. Esta clase procesa el mensaje "/start".
            </summary>
            <param name="next">el proximo handler.</param>
            <returns></returns>
        </member>
        <member name="M:Handlers.StartHandler.InternalHandle(Handlers.IMessage,System.String@)">
            <summary>
            Procesa el mensaje "/start" y evalua si el usuario que envia el mensaje esta  
            retorna true; retorna false en caso de que no se pueda procesar el mensaje.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Handlers.BaseHandler">
            <summary>
            Clase base para implementar el patrón Chain of Responsibility. En ese patrón se pasa un mensaje a través de una
            cadena de "handlers" que pueden procesar o no el mensaje. Cada "handler" decide si procesa el mensaje, o si se lo
            pasa al siguiente. Esta clase base implmementa la responsabilidad de recibir el mensaje y pasarlo al siguiente
            "handler" en caso que el mensaje no sea procesado. La responsabilidad de decidir si el mensaje se procesa o no, y
            de procesarlo, se delega a las clases sucesoras de esta clase base.
            </summary>
        </member>
        <member name="P:Handlers.BaseHandler.Next">
            <summary>
            Obtiene el próximo "handler".
            </summary>
            <value>El "handler" que será invocado si este "handler" no procesa el mensaje.</value>
        </member>
        <member name="P:Handlers.BaseHandler.Keywords">
            <summary>
            Obtiene o asigna el conjunto de palabras clave que este "handler" puede procesar.
            </summary>
            <value>Un array de palabras clave.</value>
        </member>
        <member name="M:Handlers.BaseHandler.#ctor(Handlers.IHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Handlers.BaseHandler"/>.
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Handlers.BaseHandler.#ctor(System.String[],Handlers.IHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Handlers.BaseHandler"/> con una lista de comandos.
            </summary>
            <param name="keywords">La lista de comandos.</param>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Handlers.BaseHandler.InternalHandle(Handlers.IMessage,System.String@)">
            <summary>
            Este método debe ser sobreescrito por las clases sucesores. La clase sucesora procesa el mensaje y retorna
            true o no lo procesa y retorna false.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="responder">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario</returns>
        </member>
        <member name="M:Handlers.BaseHandler.InternalCancel">
            <summary>
            Este método puede ser sobreescrito en las clases sucesores que procesan varios mensajes cambiando de estado
            entre mensajes deben sobreescribir este método para volver al estado inicial. En la clase base no hace nada.
            </summary>
        </member>
        <member name="M:Handlers.BaseHandler.CanHandle(Handlers.IMessage)">
            <summary>
            Determina si este "handler" puede procesar el mensaje. En la clase base se utiliza el array
            <see cref="P:Handlers.BaseHandler.Keywords"/> para buscar el texto en el mensaje ignorando mayúsculas y minúsculas. Las
            clases sucesores pueden sobreescribir este método para proveer otro mecanismo para determina si procesan o no
            un mensaje.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <returns>true si el mensaje puede ser pocesado; false en caso contrario.</returns>
        </member>
        <member name="M:Handlers.BaseHandler.Handle(Handlers.IMessage,System.String@)">
            <summary>
            Procesa el mensaje o la pasa al siguiente "handler" si existe.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>El "handler" que procesó el mensaje si el mensaje fue procesado; null en caso contrario.</returns>
        </member>
        <member name="M:Handlers.BaseHandler.Cancel">
            <summary>
            Retorna este "handler" al estado inicial. En los "handler" sin estado no hace nada. Los "handlers" que
            procesan varios mensajes cambiando de estado entre mensajes deben sobreescribir este método para volver al
            estado inicial.
            </summary>
        </member>
        <member name="T:Handlers.CancelHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "/cacnelar".
            </summary>
        </member>
        <member name="M:Handlers.CancelHandler.#ctor(Handlers.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Handlers.CancelHandler"/>. Esta clase procesa el mensaje "hola".
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Handlers.CancelHandler.InternalHandle(Handlers.IMessage,System.String@)">
            <summary>
            Procesa el mensaje "/cancel" elimina el ChatStatus del usuario asi como eliminar todo dato temporal que este posea y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Handlers.IHandler">
            <summary>
            Interfaz para implementar el patrón Chain of Responsibility. En ese patrón se pasa un mensaje a través de una
            cadena de "handlers" que pueden procesar o no el mensaje. Cada "handler" decide si procesa el mensaje, o si se lo
            pasa al siguiente. Esta interfaz define un atributo para definir el próximo "handler" y una una operación para
            recibir el mensaje y pasarlo al siguiente "handler" en caso que el mensaje no sea procesado. La responsabilidad de
            decidir si el mensaje se procesa o no, y de procesarlo, se realiza en las clases que implementan esta interfaz.
            <remarks>
            La interfaz se crea en función del principio de inversión de dependencias, para que los clientes de la cadena de
            responsabilidad, que pueden ser concretos, no dependan de una clase "handler" que potencialmente es abstracta.
            </remarks>
            </summary>
        </member>
        <member name="P:Handlers.IHandler.Next">
            <summary>
            Obtiene el próximo "handler".
            </summary>
            <value>El "handler" que será invocado si este "handler" no procesa el mensaje.</value>
        </member>
        <member name="M:Handlers.IHandler.Handle(Handlers.IMessage,System.String@)">
            <summary>
            Procesa el mensaje o la pasa al siguiente "handler" si existe.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>El "handler" que procesó el mensaje si el mensaje fue procesado; null en caso contrario.</returns>
        </member>
        <member name="M:Handlers.IHandler.Cancel">
            <summary>
            Retorna este "handler" al estado inicial y cancela el próximo "handler" si existe. Es utilizado para que los
            "handlers" que procesan varios mensajes cambiando de estado entre mensajes puedan volver al estado inicial en
            caso de error por ejemplo.
            </summary>
        </member>
        <member name="T:Handlers.Impresora">
            <summary>
            Clase impresora, se encarga de hacer un string con las ofertas que cumplen con los requisitos de la busqueda.
            Se cumple el principio SRP, pues la unica razon para cambiar de esta clase es si cambia la forma
            de imprimir la oferta.
            </summary>
        </member>
        <member name="F:Handlers.Impresora.texto">
            <summary>
            Texto que se va a imprimir.
            </summary>
        </member>
        <member name="P:Handlers.Impresora.Instancia">
            <summary>
            Obtiene una instancia de la clase impresora y si no existe una, crea una nueva.
            </summary>
            <value>una instancia de impresora.</value>
        </member>
        <member name="M:Handlers.Impresora.Imprimir(System.Collections.ObjectModel.Collection{Library.Oferta})">
            <summary>
            Funcion que recibe la lista de ofertas para imprimir.
            </summary>
            <param name="lista">lista buscada.</param>
            <returns></returns>
        </member>
        <member name="T:Handlers.AddHabilitacionHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "/AddHabilitacion".
            </summary>
        </member>
        <member name="M:Handlers.AddHabilitacionHandler.#ctor(Handlers.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Handlers.AddHabilitacionHandler"/>. Esta clase procesa el mensaje "/addHabilitacion".
            </summary>
            <param name="next">El próximo handler.</param>
            <returns></returns>
        </member>
        <member name="M:Handlers.AddHabilitacionHandler.InternalHandle(Handlers.IMessage,System.String@)">
            <summary>
            Este handler se ocupa de añadir una habilitación a una oferta o a un emprendedor.
            Si es ejecutado por un emprendedor la habilitación se la agrega a si mismo, además checkea.
            si actualmente tiene esa habilitación, en ese caso informa que ya esta añadida.
            
            Si es ejecutado por una empresa se le da una lista de sus ofertas y cuando elige una se le muestran.
            las habilitaciones que se pueden añadir. Si la habilitacion ya existe en esa oferta se informa que ya esta añadida.
            en el caso contrario esta se añade a la misma.
            </summary>
            <param name="message">Mensaje a procesar.</param>
            <param name="response">Respuesta que se envia al usuario.</param>
            <returns></returns>
        </member>
        <member name="T:Handlers.AddPalabraClaveHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "/AddHabilitacion".
            </summary>
        </member>
        <member name="M:Handlers.AddPalabraClaveHandler.#ctor(Handlers.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Handlers.AddPalabraClaveHandler"/>. Esta clase procesa el mensaje "/addHabilitacion".
            </summary>
            <param name="next">Próximo handler.</param>
            <returns></returns>
        </member>
        <member name="M:Handlers.AddPalabraClaveHandler.InternalHandle(Handlers.IMessage,System.String@)">
            <summary>
            Este handler añade palabras clave a las ofertas de una empresa.
            Cuando se ejecuta por una empresa se le muestra una lista de las ofertas que tiene publicadas.
            Ahí se le da la opción de elegir una y luego ingresa la palabra clave a añadir.
            
            En el caso de que el comando sea ejecutado por un emprendedor, se informa que el comando es inválido.
            </summary>
            <param name="message">Mensaje a procesar.</param>
            <param name="response">Respuesta al usaurio.</param>
            <returns></returns>
        </member>
        <member name="T:Handlers.AnadirCompradorHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "/Info".
            </summary>
        </member>
        <member name="M:Handlers.AnadirCompradorHandler.#ctor(Handlers.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Handlers.AnadirCompradorHandler"/>. Esta clase procesa el comando "/AñadirComprador".
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Handlers.AnadirCompradorHandler.InternalHandle(Handlers.IMessage,System.String@)">
            <summary>
            Procesa el comando "/AñadirCompradorOferta" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Handlers.BuscarClasificHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "chau".
            </summary>
        </member>
        <member name="F:Handlers.BuscarClasificHandler.emprendedor">
            <summary>
            El usuario que busca ofertas.
            </summary>
        </member>
        <member name="F:Handlers.BuscarClasificHandler.db">
            <summary>
            base de datos.
            </summary>
        </member>
        <member name="F:Handlers.BuscarClasificHandler.buscador">
            <summary>
            Buscador de ofertas.
            </summary>
        </member>
        <member name="M:Handlers.BuscarClasificHandler.#ctor(Handlers.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Handlers.BuscarHandler"/>. Esta clase procesa el mensaje "chau"
            y el mensaje "adiós" -un ejemplo de cómo un "handler" puede procesar comandos con sinónimos.
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Handlers.BuscarClasificHandler.InternalHandle(Handlers.IMessage,System.String@)">
            <summary>
            Procesa el mensaje "chau" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Handlers.BuscarHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "chau".
            </summary>
        </member>
        <member name="F:Handlers.BuscarHandler.emprendedor">
            <summary>
            El usuario que busca ofertas.
            </summary>
        </member>
        <member name="F:Handlers.BuscarHandler.db">
            <summary>
            base de datos.
            </summary>
        </member>
        <member name="F:Handlers.BuscarHandler.buscador">
            <summary>
            Buscador de ofertas.
            </summary>
        </member>
        <member name="M:Handlers.BuscarHandler.#ctor(Handlers.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Handlers.BuscarHandler"/>. Esta clase procesa el mensaje "chau"
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Handlers.BuscarHandler.InternalHandle(Handlers.IMessage,System.String@)">
            <summary>
            Procesa el mensaje "chau" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Handlers.BuscarUbiHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "chau".
            </summary>
        </member>
        <member name="F:Handlers.BuscarUbiHandler.emprendedor">
            <summary>
            El usuario que busca ofertas.
            </summary>
        </member>
        <member name="F:Handlers.BuscarUbiHandler.db">
            <summary>
            base de datos.
            </summary>
        </member>
        <member name="F:Handlers.BuscarUbiHandler.buscador">
            <summary>
            Buscador de ofertas.
            </summary>
        </member>
        <member name="M:Handlers.BuscarUbiHandler.#ctor(Handlers.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Handlers.BuscarHandler"/>. Esta clase procesa el mensaje "chau"
            y el mensaje "adiós" -un ejemplo de cómo un "handler" puede procesar comandos con sinónimos.
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Handlers.BuscarUbiHandler.InternalHandle(Handlers.IMessage,System.String@)">
            <summary>
            Procesa el mensaje "chau" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Handlers.GoodByeHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "chau".
            </summary>
        </member>
        <member name="M:Handlers.GoodByeHandler.#ctor(Handlers.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Handlers.GoodByeHandler"/>. Esta clase procesa el mensaje "chau"
            y el mensaje "adiós" -un ejemplo de cómo un "handler" puede procesar comandos con sinónimos.
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Handlers.GoodByeHandler.InternalHandle(Handlers.IMessage,System.String@)">
            <summary>
            Procesa el mensaje "chau" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Handlers.HelloHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "hola".
            </summary>
        </member>
        <member name="M:Handlers.HelloHandler.#ctor(Handlers.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Handlers.HelloHandler"/>. Esta clase procesa el mensaje "hola".
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Handlers.HelloHandler.InternalHandle(Handlers.IMessage,System.String@)">
            <summary>
            Procesa el mensaje "hola" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Handlers.HelpHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "/ayuda".
            </summary>
        </member>
        <member name="M:Handlers.HelpHandler.#ctor(Handlers.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Handlers.HelpHandler"/>. Esta clase procesa el comando "/ayuda".
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Handlers.HelpHandler.InternalHandle(Handlers.IMessage,System.String@)">
            <summary>
            Procesa el comando "/ayuda" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Handlers.HistorialUsuarioHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "/historialDesde".
            </summary>
        </member>
        <member name="M:Handlers.HistorialUsuarioHandler.#ctor(Handlers.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Handlers.HistorialUsuarioHandler"/>. Esta clase procesa el comando "/historialDesde".
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Handlers.HistorialUsuarioHandler.InternalHandle(Handlers.IMessage,System.String@)">
            <summary>
            Procesa el mensaje "/historialDesde" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">Mensaje a procesar.</param>
            <param name="response">>La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Handlers.InfoUsuarioHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "/Info".
            </summary>
        </member>
        <member name="M:Handlers.InfoUsuarioHandler.#ctor(Handlers.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Handlers.InfoUsuarioHandler"/>. Esta clase procesa el comando "/Info".
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Handlers.InfoUsuarioHandler.InternalHandle(Handlers.IMessage,System.String@)">
            <summary>
            Procesa el comando "/Info" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Handlers.MisPublicacionesHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "/MisPublicaciones".
            </summary>
        </member>
        <member name="M:Handlers.MisPublicacionesHandler.#ctor(Handlers.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Handlers.MisPublicacionesHandler"/>. Esta clase procesa el comando "/MisPublicaciones".
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Handlers.MisPublicacionesHandler.InternalHandle(Handlers.IMessage,System.String@)">
            <summary>
            Procesa el comando "/MisPublicaciones" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Handlers.PublicarOfertaHandler">
            <summary>
            /// Un "handler" del patrón Chain of Responsibility que implementa el comando "/PublicarOferta".
            </summary>
        </member>
        <member name="M:Handlers.PublicarOfertaHandler.#ctor(Handlers.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Handlers.PublicarOfertaHandler"/>. Esta clase procesa el comando "/PublicarOferta".
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Handlers.PublicarOfertaHandler.InternalHandle(Handlers.IMessage,System.String@)">
            <summary>
            Procesa el mensaje "/PublicarOferta" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="message">Mensaje a procesar.</param>
            <param name="response">>La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="T:Handlers.Registro">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "/registro".
            </summary>
        </member>
        <member name="M:Handlers.Registro.#ctor(Handlers.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Handlers.Registro"/>. Esta clase procesa el mensaje "/registro".
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:Handlers.Registro.InternalHandle(Handlers.IMessage,System.String@)">
            <summary>
            Procesa el comando "/registro", en el caso de que el usuario se encuentre en la lista de invitados.
            se procede a registrarlo como empresa (se le asigna el UserStatus "RegistroStatus").
            Y en el caso de que no esta en la lista de invitados comienza el registro como emprendedor.
            Se asigna el mismo status pero en el caso de la Empresa termina antes ya que el Emprendedor contiene.
            un dato que las Empresas no necesitan.
            Y en los casos que se ejecute el comando pero la empresa/emprendedor ya esten registrados se les informa esto mismo.
            </summary>
            <param name="message">Mensaje a procesar.</param>
            <param name="response">Respuesta al usuario.</param>
            <returns></returns>
        </member>
        <member name="T:Library.Clasificacion">
            <summary>
            Esta clase representa una clasificación de un material.
            </summary>
        </member>
        <member name="M:Library.Clasificacion.#ctor">
            <summary>
            Constructor vacío para la serialización.
            </summary>
        </member>
        <member name="M:Library.Clasificacion.#ctor(System.String,System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.Clasificacion"/>.
            </summary>
            <param name="nombre"> parametro nombre recibido por el constructor.</param>
            <param name="descripcion">parametro descripcion recibido por el constructor.</param>
        </member>
        <member name="P:Library.Clasificacion.Nombre">
            <summary>
            Obtiene un valor que indica el nombre de la clasificación.
            </summary>
            <value>this.nombre.</value>
        </member>
        <member name="P:Library.Clasificacion.Descripcion">
            <summary>
            Obtiene un valor que indica la descripcion de la clasificación.
            </summary>
            <value>this.descripcion.</value>
        </member>
        <member name="M:Library.Clasificacion.ConvertToJson">
            <summary>
            Convert to Json.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Library.Contenedor">
            <summary>
            Esta clase representa un contenedor de las diferentes clases del bot.
            Utilzia el patron de diseño Singleton. Pues solo se puede tener una instancia de esta clase.
            Es la clase EXPERTA en contener las diferentes instancias del programa.
            Ademas se cumple SRP pues su unica razon para cambiar es que se cambie la forma de almacenar las instancias.
            Tambien se utiliza el patron CREATOR en los metodos AddEmpresa y AddEmprendedor, pues almacena dichas
            instancias de clase.
            </summary>
        </member>
        <member name="F:Library.Contenedor.contenedor">
            <summary>
            Contenedor.
            </summary>
        </member>
        <member name="F:Library.Contenedor.habilitaciones">
            <summary>
            Colleción de habilitaciones disponibles.
            </summary>
        </member>
        <member name="F:Library.Contenedor.rubros">
            <summary>
            Colección de rubros disponibles.
            </summary>
        </member>
        <member name="F:Library.Contenedor.clasificaciones">
            <summary>
            Colección de clasificaciones disponibles.
            </summary>
        </member>
        <member name="F:Library.Contenedor.ofertas">
            <summary>
            Colección de ofertas.
            </summary>
        </member>
        <member name="F:Library.Contenedor.emprendedores">
            <summary>
            Diccionario de emprendedores registrados, guarda el ID como key y un objeto emprendedor.
            </summary>
        </member>
        <member name="F:Library.Contenedor.empresas">
            <summary>
            Diccionario de empresas registradas, guarda el ID como key y un objeto empresa.
            </summary>
        </member>
        <member name="F:Library.Contenedor.administradores">
            <summary>
            Lista de administradores, solo guarda su ID.
            </summary>
        </member>
        <member name="F:Library.Contenedor.invitados">
            <summary>
            Lista de invitados, solo guarda su ID.
            </summary>
        </member>
        <member name="M:Library.Contenedor.#ctor">
            <summary>
            Constructor vacío de contenedor.
            </summary>
        </member>
        <member name="P:Library.Contenedor.Instancia">
            <summary>
            Obtiene una instancia de la clase Contenedor y si no existe la crea.
            </summary>
            <value>this.contenedor.</value>
        </member>
        <member name="P:Library.Contenedor.Habilitaciones">
            <summary>
            Obtiene un valor con la habilitacion correspondiente.
            </summary>
            <value>this.habilitaciones.</value>
        </member>
        <member name="P:Library.Contenedor.Rubros">
            <summary>
            Obtiene un valor con la lista de rubros.
            </summary>
            <value>this.rubros.</value>
        </member>
        <member name="P:Library.Contenedor.Clasificaciones">
            <summary>
            Obtiene un valor con la lista de clasificaciones.
            </summary>
            <value>this.clasificaciones.</value>
        </member>
        <member name="P:Library.Contenedor.Ofertas">
            <summary>
            Obtiene un valor con la lista de las ofertas.
            </summary>
            <value>this.ofertas.</value>
        </member>
        <member name="P:Library.Contenedor.Emprendedores">
            <summary>
            Obtiene un valor con la lista de los Emprendedores.
            </summary>
            <value>this.emprendedores.</value>
        </member>
        <member name="P:Library.Contenedor.Empresas">
            <summary>
            Obtiene el diccionario de Empresas registradas.
            </summary>
            <value></value>
        </member>
        <member name="P:Library.Contenedor.Invitados">
            <summary>
            Obtiene la lista de usuarios invitados.
            </summary>
        </member>
        <member name="P:Library.Contenedor.Administradores">
            <summary>
            Obtiene la lista de administradores.
            </summary>
            <value></value>
        </member>
        <member name="M:Library.Contenedor.AddHabilitacion(Library.Habilitacion)">
            <summary>
            Añiade una habilitacion a la lista de habilitaciones.
            </summary>
            <param name="habilitacion">parametro habilitacion que recibe AddHabilitacion.</param>
        </member>
        <member name="M:Library.Contenedor.RemoveHabiltiacion(Library.Habilitacion)">
            <summary>
            Remueve una habilitacion de la lista de habilitaciones.
            </summary>
            <param name="habilitacion">parametro habilitacion que recibe RemoveHabilitacion.</param>
        </member>
        <member name="M:Library.Contenedor.AddRubro(Library.Rubro)">
            <summary>
            Añiade un rubro a la lista de rubros.
            </summary>
            <param name="rubro">parametro rubro que recibe RemoveRubro.</param>
        </member>
        <member name="M:Library.Contenedor.RemoveRubro(Library.Rubro)">
            <summary>
            Remueve un rubro de la lista de rubros.
            </summary>
            <param name="rubro">parametro rubro que recibe RemoveRubro.</param>
        </member>
        <member name="M:Library.Contenedor.AddClasificacion(Library.Clasificacion)">
            <summary>
            Añiade una clasificacion a la lista de clasificaciones.
            </summary>
            <param name="clasificacion">parametro clasificacion que recibe AddClasificacion.</param>
        </member>
        <member name="M:Library.Contenedor.RemoveClasificacion(Library.Clasificacion)">
            <summary>
            Remueve una clasificacion de la lista de clasificaciones.
            </summary>
            <param name="clasificacion">parametro clasificacion que recibe Removelasificacion.</param>
        </member>
        <member name="M:Library.Contenedor.AddOferta(Library.Oferta)">
            <summary>
            Añiade una oferta a la lista de ofertas.
            </summary>
            <param name="oferta">parametro oferta recibido por el metodo AddOferta.</param>
        </member>
        <member name="M:Library.Contenedor.RemoveOferta(Library.Oferta)">
            <summary>
            Remueve una oferta de la lista de ofertas.
            </summary>
            <param name="oferta">parametro oferta recibido por el metodo RemoveOferta.</param>
        </member>
        <member name="M:Library.Contenedor.AddEmprendedor(System.String,Library.Rubro,System.String,System.String,System.String,System.String)">
            <summary>
            Añade un emprendedor al diccionario de emprendedores.
            Se utiliza un diccionario porque es mas facil para buscarlos por ID de usuario.
            </summary>
            <param name="ID">ID del usuario.</param>
            <param name="emprendedor">Instancia de clase emprendedor.</param>
        </member>
        <member name="M:Library.Contenedor.RemoveEmprendedor(System.String)">
            <summary>
            Remueve un emprendedor del diccionario de emprendedores.
            </summary>
            <param name="ID">ID del usuario.</param>
        </member>
        <member name="M:Library.Contenedor.AddEmpresa(System.String,Library.Rubro,System.String,System.String,System.String,System.String)">
            <summary>
            Agrega una empresa al diccioanrio de empresas.
            </summary>
            <param name="ID">ID del usuario</param>
            <param name="empresa">Instancia de la clase empresa.</param>
        </member>
        <member name="M:Library.Contenedor.RemoveEmmpresa(System.String)">
            <summary>
            Remueve una empresa del diccionario de empresas.
            </summary>
            <param name="ID">ID del usuario.</param>
        </member>
        <member name="M:Library.Contenedor.AddInvitado(System.String)">
            <summary>
            Agrega a un usuario a la lista de invitados.
            </summary>
            <param name="ID">ID del usuario.</param>
        </member>
        <member name="M:Library.Contenedor.AddAdministrador(System.String)">
            <summary>
            Agrega a un administrador a la lista de admins.
            </summary>
            <param name="ID">ID del usuario.</param>
        </member>
        <member name="T:Library.DatosTemporales">
            <summary>
            Datos temporales del usuario.
            </summary>
        </member>
        <member name="P:Library.DatosTemporales.Instancia">
            <summary>
            Singleton datos.
            </summary>
            <value></value>
        </member>
        <member name="P:Library.DatosTemporales.DataTemporal">
            <summary>
            Data temp.
            </summary>
            <value></value>
        </member>
        <member name="M:Library.DatosTemporales.AddKeyUser(System.String)">
            <summary>
            Add key.
            </summary>
            <param name="ID"></param>
        </member>
        <member name="M:Library.DatosTemporales.AddDato(System.String,System.String)">
            <summary>
            Add dato.
            </summary>
            <param name="chatId"></param>
            <param name="dato"></param>
        </member>
        <member name="M:Library.DatosTemporales.RemoveDato(System.String,System.String)">
            <summary>
            Remove dato.
            </summary>
            <param name="chatId"></param>
            <param name="dato"></param>
        </member>
        <member name="T:Library.Habilitacion">
            <summary>
            Esta clase representa una Habilitacion basica.
            </summary>
        </member>
        <member name="M:Library.Habilitacion.#ctor">
            <summary>
            Constructor vacío para la deserialización.
            </summary>
        </member>
        <member name="M:Library.Habilitacion.#ctor(System.String,System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.Habilitacion"/>.
            </summary>
            <param name="name">Parametro name que recibe el constructor de la habilitacion.</param>
            <param name="descripcion">Parametro descripcion que recibe el constructor de la habilitacion.</param>
        </member>
        <member name="P:Library.Habilitacion.Name">
            <summary>
            Obtiene un valor que indica el nombre de la habilitacion.
            </summary>
        </member>
        <member name="P:Library.Habilitacion.Descripcion">
            <summary>
            Obtiene un valor que indica la descripcion de la habilitacion.
            </summary>
        </member>
        <member name="M:Library.Habilitacion.ConvertToJson">
            <summary>
            Convert to Json.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Library.IJsonSerialize">
            <summary>
            Interface con la firma de los métodos que debe tener un manejador de datos.
            </summary>
        </member>
        <member name="M:Library.IJsonSerialize.ConvertToJson">
            <summary>
            Método que serializa un objeto en formato Json.
            </summary>
            <returns>String con el objeto serializado en formato Json.</returns>
        </member>
        <member name="T:Library.Busqueda">
            <summary>
            Esta clase representa la busqueda de ofertas a partir de palabras claves, ubicacion y clasificacion.
            Se utilzia el principio SRP, donde la unica razon para cambiar de la clase es que se modifique la forma en que se busca la informacion.
            Ademas se usa el patron Singleton pues solo se debe tener una instancia de esta clase.
            </summary>
        </member>
        <member name="P:Library.Busqueda.Instancia">
            <summary>
            Obtiene una instancia de la clase Busqueda y si no existe una, crea una nueva.
            </summary>
            <value>una instancia de busqueda.</value>
        </member>
        <member name="M:Library.Busqueda.BuscarOferta(Library.Emprendedor,System.String,Library.Contenedor)">
            <summary>
            La función para buscar ofertas reciben un string con las palabras a buscar y
            revisa cada oferta para ver si las palabras claves coinciden.
            Luego comprueba si el emprendedor tiene las habilitaciones necesarias para acceder a la oferta.
            Retornando una lista temporal para que el usuario reciba solo las ofertas que coincidan.
            Contenedor basededatos se usa como una db temporal.
            </summary>
            <param name="emprendedor">Es el usuario que busca las ofertas.</param>
            <param name="mensaje">Son las palabras claves que busca el emprendedor.</param>
            <param name="basededatos">Es la base de datos donde se buscan las ofertas disponibles.</param>
            <returns>Lista de ofertas que cumplen con los requisitos.</returns>
        </member>
        <member name="M:Library.Busqueda.BuscarOferta(Library.Emprendedor,Library.Ubicacion,Library.Contenedor)">
            <summary>
            En este caso la funcion busqueda recibe la ubicación en la que se quiere buscar.
            revisa cada oferta para ver si la ubicacion coincide con ubicación buscada.
            Retornando una lista temporal para que el usuario reciba solo las ofertas que coincidan.
            Contenedor basededatos se usa como una db temporal.
            </summary>
            <param name="emprendedor">Es el usuario que busca las ofertas.</param>
            <param name="ubicacion">Ubicacion buscada por el emprendedor.</param>
            <param name="basededatos">Es la base de datos donde se buscan las ofertas disponibles.</param>
            <returns>Lista de ofertas que cumplen con los requisitos.</returns>
        </member>
        <member name="M:Library.Busqueda.BuscarOferta(Library.Emprendedor,Library.Clasificacion,Library.Contenedor)">
            <summary>
            En este caso la funcion busqueda recibe clasificacion del material.
            revisa la clasificacion de los materiales de cada oferta para ver si son iguales.
            Retornando una lista temporal para que el usuario reciba solo las ofertas que coincidan.
            Contenedor basededatos se usa como una db temporal.
            </summary>
            <param name="emprendedor">Es el usuario que busca las ofertas.</param>
            <param name="clasificacion">Clasificacion buscada por el emprendedor.</param>
            <param name="basededatos">Es la base de datos donde se buscan las ofertas disponibles.</param>
            <returns>Lista de ofertas que cumplen con los requisitos.</returns>
        </member>
        <member name="T:Library.Material">
            <summary>
            Clase que representa al Material.
            Es una clase experta en crear materiales. Y tiene la sola responsabilidad de crear materiales. (SRP).
            </summary>
        </member>
        <member name="M:Library.Material.#ctor(System.String,Library.Clasificacion,System.Int32,System.String,System.Double)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.Material"/>.
            </summary>
            <param name="nombre">El nombre del material.</param>
            <param name="clasificacion">La clasificacion del material.</param>
            <param name="cantidad">La cantidad de la unidad.</param>
            <param name="unidad">La unidad del material.</param>
            <param name="valor">El valor de la unidad.</param>
        </member>
        <member name="P:Library.Material.Clasificacion">
            <summary>
            Obtiene la clasificacion del material.
            </summary>
            <value>la clasificacion del material.</value>
        </member>
        <member name="P:Library.Material.Cantidad">
            <summary>
            Obtiene un valor que indica la cantidad del material.
            </summary>
            <value>la cantidad de la unidad.</value>
        </member>
        <member name="P:Library.Material.Unidad">
            <summary>
            Obtiene un valor que indica la unidad del material.
            </summary>
            <value>la unidad en la cual se va a medir.</value>
        </member>
        <member name="P:Library.Material.Valor">
            <summary>
            Obtiene un valor que indica el valor del material.
            </summary>
            <value>el valor de la unidad.</value>
        </member>
        <member name="P:Library.Material.Nombre">
            <summary>
            Obtiene un valor que indica el nombre del material.
            </summary>
            <value>el nombre del material.</value>
        </member>
        <member name="T:Library.Oferta">
            <summary>
            Esta clase representa una oferta.
            Es experta (EXPERT) en la creación de ofertas.
            Ademas se utiliza el patron CREATOR, pues los materiales son creados al momento de inicializar la oferta.
            Pues oferta usa de forma muy cercana los materiales. => oferta tiene la responsabilidad de crear materiales.
            </summary>
        </member>
        <member name="M:Library.Oferta.#ctor">
            <summary>
            Constructor de oferta vacío para la deserialización.
            </summary>
        </member>
        <member name="M:Library.Oferta.#ctor(System.String,Library.Empresa,System.String,System.String,System.String,Library.Clasificacion,System.Int32,System.String,System.Double,System.Int32,System.DateTime)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.Oferta"/>.
            </summary>
            <param name="nombreoferta">parametro nombre de la oferta.</param>
            <param name="empresa">parametro empresa que oferta.</param>
            <param name="ciudad">ciuadad donde se encuentra la oferta.</param>
            <param name="calle">callle donde se encuentra la oferta.</param>
            <param name="nombreMaterial">nombre del material donde se encuentra la oferta.</param>
            <param name="clasificacion">clasificacion del material.</param>
            <param name="cantidad">cantidad del material.</param>
            <param name="unidad">unidad del material.</param>
            <param name="valor">valor del material.</param>
            <param name="recurrenciaSemanal">Cada cuantas semanas se renueva la oferta.</param>
            <param name="fechaDeGeneracion">cuando se genera la oferta.</param>
        </member>
        <member name="P:Library.Oferta.RecurrenciaSemanal">
            <summary>
            Recurrencia semanal. Esto es un int de cada cuantas semanas se repite la oferta.
            </summary>
            <value></value>
        </member>
        <member name="P:Library.Oferta.FechadeGeneracion">
            <summary>
            Obtiene o establece cuando la oferta va a ser generada.
            </summary>
            <value>La fecha de la generacion.</value>
        </member>
        <member name="P:Library.Oferta.Identificador">
            <summary>
            ID de la oferta.
            </summary>
            <value></value>
        </member>
        <member name="P:Library.Oferta.Nombreoferta">
            <summary>
            Obtiene o establece el nombre de la oferta.
            </summary>
            <value>Nombre de la oferta.</value>
        </member>
        <member name="P:Library.Oferta.Calle">
            <summary>
            Obtiene o establece la calles donde se encuentra la oferta.
            </summary>
            <value></value>
        </member>
        <member name="P:Library.Oferta.Ciudad">
            <summary>
            Obtiene o establece la ciudad donde se encuentra la oferta.
            </summary>
            <value></value>
        </member>
        <member name="P:Library.Oferta.Nombrematerial">
            <summary>
            Obtiene o establece el nombre del materia de la oferta.
            </summary>
            <value></value>
        </member>
        <member name="P:Library.Oferta.Clasificacion">
            <summary>
            Obtiene o establece la clasificacion del material.
            </summary>
            <value></value>
        </member>
        <member name="P:Library.Oferta.Cantidad">
            <summary>
            Obtiene o establece la cantidad de material.
            </summary>
            <value></value>
        </member>
        <member name="P:Library.Oferta.Unidad">
            <summary>
            Obtiene o establece la unidad del material.
            </summary>
            <value></value>
        </member>
        <member name="P:Library.Oferta.Valor">
            <summary>
            Obtiene o establece el precio de la oferta.
            </summary>
            <value></value>
        </member>
        <member name="P:Library.Oferta.Material">
            <summary>
            Obtiene o establece material ofertado en la oferta.
            </summary>
            <value>Material ofrecido.</value>
        </member>
        <member name="P:Library.Oferta.Empresa">
            <summary>
            Obtiene empresa que realiza la oferta.
            </summary>
            <value>Empresa que oferta.</value>
        </member>
        <member name="P:Library.Oferta.Ubicacion">
            <summary>
            Obtiene o establece ubicación de la oferta.
            </summary>
            <value>Ubicacion de la oferta.</value>
        </member>
        <member name="P:Library.Oferta.PalabrasClaves">
            <summary>
            Obtiene palabras clave de la oferta, estas sirven para su futura busqueda.
            </summary>
            <value>Palabras clave de la oferta.</value>
        </member>
        <member name="P:Library.Oferta.Habilitaciones">
            <summary>
            Obtiene lista de habilitaciones nesesarias para poder adquirir la oferta.
            </summary>
            <value>retorna this.habilitaciones.</value>
        </member>
        <member name="M:Library.Oferta.AddHabilitacion(Library.Habilitacion)">
            <summary>
            Añade habilitaciones a la lista.
            </summary>
            <param name="habilitacion">Habilitaciones necesarias para adquirir la oferta.</param>
        </member>
        <member name="M:Library.Oferta.AddPalabraClave(System.String)">
            <summary>
            Añade palabras clave a la lista.
            </summary>
            <param name="palabraClave">Palabras clave para buscar la oferta.</param>
        </member>
        <member name="P:Library.Oferta.Disponible">
            <summary>
            Obtiene si la oferta esta disponible o no PARA OFERTAS ÚNICAS.
            </summary>
            <value></value>
        </member>
        <member name="P:Library.Oferta.FechaCompra">
            <summary>
            Obtiene la fecha de compra PARA OFERTAS ÚNICAS.
            </summary>
            <value></value>
        </member>
        <member name="M:Library.Oferta.AddComprador(System.String,System.DateTime)">
            <summary>
            Añade un comprador al oferta, distingue entre ofertas únicas y recurrentes.
            </summary>
            <param name="id">ID del usuario.</param>
            <param name="fecha">Fecha de compra.</param>
        </member>
        <member name="P:Library.Oferta.RegistroVentas">
            <summary>
            Obtiene el registro de ventas PARA OFERTAS RECURRENTES.
            </summary>
            <value></value>
        </member>
        <member name="M:Library.Oferta.ConvertToJson">
            <summary>
            Convert to Json.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Library.Ubicacion">
            <summary>
            Esta clase representa una ubicacion.
            </summary>
        </member>
        <member name="M:Library.Ubicacion.#ctor">
            <summary>
            Constructor vacío para la serialización.
            </summary>
        </member>
        <member name="M:Library.Ubicacion.#ctor(System.String,System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.Ubicacion"/>.
            </summary>
            <param name="ciudad">parametro ciudad que recibe el constructor.</param>
            <param name="calle">parametro calle que recibe el constructor.</param>
        </member>
        <member name="P:Library.Ubicacion.Ciudad">
            <summary>
             Obtiene o establece la ciudad.
            </summary>
            <value>this.ciudad.</value>
        </member>
        <member name="P:Library.Ubicacion.Calle">
            <summary>
            Obtiene o establece la calle.
            </summary>
            <value>this.calle.</value>
        </member>
        <member name="M:Library.Ubicacion.ConvertToJson">
            <summary>
            Convert to Json.
            </summary>
            <returns></returns>    
        </member>
        <member name="T:Library.Rubro">
            <summary>
            Clase que representa los rubros.
            </summary>
        </member>
        <member name="M:Library.Rubro.#ctor">
            <summary>
            Constructor vacío de rubro para la deserialización
            </summary>
        </member>
        <member name="M:Library.Rubro.#ctor(System.String,System.String,System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.Rubro"/>.
            </summary>
            <param name="nombre">El nombre del rubro.</param>
            <param name="area">El area del Rubro.</param>
            <param name="descripcion">La descripcion del rubro.</param>
        </member>
        <member name="P:Library.Rubro.Nombre">
            <summary>
            Obtiene un valor que indica el nombre del rubro.
            </summary>
            <value>El nombre del Rubro.</value>
        </member>
        <member name="P:Library.Rubro.Area">
            <summary>
            Obtiene un valor que indica el area del rubro.
            </summary>
            <value>El area del Rubro.</value>
        </member>
        <member name="P:Library.Rubro.Descripcion">
            <summary>
            Obtiene un valor que indica la descripcion del rubro.
            </summary>
            <value>La descripcion del Rubro.</value>
        </member>
        <member name="M:Library.Rubro.ConvertToJson">
            <summary>
            Convert to Json.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Library.StatusManager.UserStatusChat">
            <summary>
            Obtiene el diccionario de usuarios y su status.
            </summary>
            <value></value>
        </member>
        <member name="M:Library.StatusManager.AddKeyUser(System.String)">
            <summary>
            Añade el usuario al diccionario de status pero sin status.
            </summary>
            <param name="ID">ID del usuario.</param>
        </member>
        <member name="M:Library.StatusManager.AddUserStatus(System.String,System.String)">
            <summary>
            Añade el status del usuario al diccionario.
            </summary>
            <param name="ID">ID del usuario.</param>
            <param name="status">Status del usuario.</param>
        </member>
        <member name="T:Library.Admin">
            <summary>
            Esta clase representa un Administrador de la aplicacion.
            </summary>
        </member>
        <member name="M:Library.Admin.#ctor(System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.Admin"/>.
            </summary>
            <param name="nombre">parametro que recibe el nombre del admin.</param>
        </member>
        <member name="P:Library.Admin.Nombre">
            <summary>
            Obtiene o establece un valor que indica el nombre del admin.
            </summary>
            <value>this.nombre.</value>
        </member>
        <member name="M:Library.Admin.InvitarEmpresa(System.String)">
            <summary>
            Invita a una Empresa.
            </summary>
            <param name="userEmpresa">parametro userEmpresa que represneta el usuario de la empresa a inviatr.</param>
        </member>
        <member name="M:Library.Admin.ConvertToJson">
            <summary>
            Convert to Json.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Library.Emprendedor">
            <summary>
            Esta clase representa un Emprendedor.
            Patrones y principios utilizados:
            EXPERT, porque el emprendedor es una clase experta en la inficación que debe poseer un emprendedor.
            </summary>
        </member>
        <member name="M:Library.Emprendedor.#ctor">
            <summary>
            Constructor vacío para deserialización.
            </summary>
        </member>
        <member name="M:Library.Emprendedor.#ctor(System.String,Library.Rubro,System.String,System.String,System.String,System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.Emprendedor"/>.
            </summary>
            <param name="nombre">parametro nombre recibido por el constructor del emprendedor.</param>
            <param name="rubro">parametro rubro recibido por el constructor del emprendedor.</param>
            <param name="ciudad">parametro ciudad recibido por el constructor del emprendedor.</param>
            <param name="calle">parametro calle recibido por el constructor del emprendedor.</param>
            <param name="especializacion">parametro especializacion recibidio por el constructor del emprendedor.</param>
            <param name="id">parametro id del emprendedor que se registra.</param>
        </member>
        <member name="P:Library.Emprendedor.Nombre">
            <summary>
            Obtiene o establece un valor el nombre del usuario.
            </summary>
        </member>
        <member name="P:Library.Emprendedor.ID">
            <summary>
            Obtiene o establece el id del usuario.
            </summary>
        </member>
        <member name="P:Library.Emprendedor.Rubro">
            <summary>
            Obtiene o establece un valor que es el rubro del usuario.
            </summary>
        </member>
        <member name="P:Library.Emprendedor.Ciudad">
            <summary>
            Obtiene o establece la ciudad donde esta ubicado el emprendedor.
            </summary>
        </member>
        <member name="P:Library.Emprendedor.Calle">
            <summary>
            Obtiene o establece la calle donde esta ubicado el emprendedor.
            </summary>
            <value></value>
        </member>
        <member name="P:Library.Emprendedor.Ubicacion">
            <summary>
            Obtiene o establece un valor que indica la ubicacion del usuario.
            </summary>
        </member>
        <member name="P:Library.Emprendedor.RegistroUsuario">
            <summary>
            Obtiene un valor que indica el registro del usuario.
            </summary>
        </member>
        <member name="M:Library.Emprendedor.AddToRegister(Library.Oferta)">
            <summary>
            Añiade al registro del usuario la oferta.
            </summary>
            <param name="oferta">Parametro.</param>
        </member>
        <member name="M:Library.Emprendedor.BuscarEnHistorial(System.DateTime)">
            <summary>
            Busca en el registro del usuario.
            </summary>
            <param name="fechaDesde">Parametro que indica la fechaDesde donde se desea buscar.</param>
            <returns>una lista de ofertas llamada resultado.</returns>
        </member>
        <member name="P:Library.Emprendedor.Especializacion">
            <summary>
            Obtiene o establece un valor que indica la especializacion del emprendedor.
            </summary>
            <value>this.especializacon.</value>
        </member>
        <member name="P:Library.Emprendedor.Habilitaciones">
            <summary>
            Obtiene el valor de las habilitaciones del emprendedor.
            </summary>
            <value>this.habilitaciones.</value>
        </member>
        <member name="M:Library.Emprendedor.AddHabilitacion(Library.Habilitacion)">
            <summary>
            Agrega una habilitacion al emprendedor.
            </summary>
            <param name="habilitacion">parametro habilitaciones que recibe el metodo AddHabilitacion.</param>
        </member>
        <member name="M:Library.Emprendedor.RemoveHabilitacion(Library.Habilitacion)">
            <summary>
            Remueve una habilitacion al emprendedor.
            </summary>
            <param name="habilitacion">parametro habilitaciones que recibe el metodo RemoveHabilitacion.</param>
        </member>
        <member name="M:Library.Emprendedor.ConvertToJson">
            <summary>
            Convert To Json.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Library.Empresa">
            <summary>
            Clase que representa una Empresa.
            Patrones y principios utilizados:
            EXPERT, porque conoce toda la informacion que debe conocer una empresa.
            </summary>
        </member>
        <member name="M:Library.Empresa.#ctor">
            <summary>
            Constructor de empresa vacío para deserialización.
            </summary>
        </member>
        <member name="M:Library.Empresa.#ctor(System.String,Library.Rubro,System.String,System.String,System.String,System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Library.Empresa"/>.
            </summary>
            <param name="nombre">parametro nombre recibido por el constructor de empresa.</param>
            <param name="rubro">parametro rubro recibido por el constructor de la empresa.</param>
            <param name="ciudad">parametro ciudad recibido por el constructor de la emrpesa.</param>
            <param name="calle">parametro calle recibido por el constructor de la empresa.</param>
            <param name="id">parametro id recibido por el constructor de la empresa.</param>
            <param name="telefono">parametro telefono recibido por el constructor de la empresa.</param>
        </member>
        <member name="P:Library.Empresa.ID">
            <summary>
            Obtiene o establece el id del usuario.
            </summary>
            <value></value>
        </member>
        <member name="P:Library.Empresa.Nombre">
            <summary>
            Obtiene o establece un valor el nombre del usuario.
            </summary>
            <value>this.nombre.</value>
        </member>
        <member name="P:Library.Empresa.Calle">
            <summary>
            Obtiene o establece la calle donde se ubica la empresa.
            </summary>
        </member>
        <member name="P:Library.Empresa.Ciudad">
            <summary>
            Obtiene o establece la ciudad donde se ubica la empresa.
            </summary>
        </member>
        <member name="P:Library.Empresa.Telefono">
            <summary>
            Obtiene o establece el telefono de la empresa.
            </summary>
            <value></value>
        </member>
        <member name="P:Library.Empresa.Rubro">
            <summary>
            Obtiene o establece un valor que es el rubro del usuario.
            </summary>
            <value>this.rubro.</value>
        </member>
        <member name="P:Library.Empresa.Ubicacion">
            <summary>
            Obtiene o establece un valor que indica la ubicacion del usuario.
            </summary>
            <value>this.ubicacion.</value>
        </member>
        <member name="P:Library.Empresa.RegistroUsuario">
            <summary>
            Obtiene un valor que indica el registro del usuario.
            </summary>
            <value>this.registroUsuario.</value>
        </member>
        <member name="M:Library.Empresa.AddToRegister(Library.Oferta)">
            <summary>
            Añiade al registro del usuario la oferta.
            </summary>
            <param name="oferta">Parametro.</param>
        </member>
        <member name="M:Library.Empresa.BuscarEnHistorial(System.DateTime)">
            <summary>
            Busca en el registro del usuario.
            </summary>
            <param name="fechaDesde">Parametro que indica la fechaDesde donde se desea buscar.</param>
            <returns>una lista de ofertas llamada resultado.</returns>
        </member>
        <member name="M:Library.Empresa.ConvertToJson">
            <summary>
            Convert to json.
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
